package entity;
// Generated Feb 24, 2023 8:58:14 AM by Hibernate Tools 5.2.12.Final

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.annotations.Formula;
import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import entity.frwk.SysUsers;

/**
 * QcOs generated by hbm2java
 */
@Entity
@Table(name = "QC_OS")
public class QcOs implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String id;
	private Customer customers;
	@JsonIgnoreProperties({ "quotationItemId" })
	private QuotationItemExe quotationItemExe;
	@JsonIgnoreProperties("lstMail")
	private SysUsers sysUsers;
	private long amount;
	private Date createDate;
	@JsonIgnoreProperties({ "department", "company", "technicalId", "planner", "acId", "quotationItemMaterialList",
			"lstProcessExe", "lstQuotationRepaire", "quotationId", "quotationItemAllExeList","quotationItemExeList","quotationItemProList","sysUsers" })
	private QuotationItem quotationItem;
	@JsonIgnoreProperties({ "quotationItemExe","workOrderExes","qi"})
	private WorkOrder workOrder;

	public QcOs() {
	}

	public QcOs(String id, SysUsers sysUsers, long amount, Date createDate) {
		this.id = id;
		this.sysUsers = sysUsers;
		this.amount = amount;
		this.createDate = createDate;
	}

	public QcOs(SysUsers sysUsers, QcOsDetail detail) {
		detail.setQcOs(this);
		this.amount = detail.getAmount();
		this.qcOsDetails = new ArrayList<QcOsDetail>(Arrays.asList(detail));
		this.ids = detail.getQcChkOutSrc().getId();
		this.amounts = String.valueOf(detail.getAmount());
		this.sysUsers = sysUsers;
		this.dsmaql = detail.getWorkOrder().getQuotationItemExe().getQuotationItemId().getManageCode();
		this.workOrder = detail.getWorkOrder();
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 40)
	@GeneratedValue(generator = "uuid")
	@GenericGenerator(name = "uuid", strategy = "uuid")
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@JsonIgnoreProperties({"qcChkOutSrc","qcOs"})
	private List<QcOsDetail> qcOsDetails = new ArrayList<QcOsDetail>();

	@OneToMany(cascade = CascadeType.ALL, mappedBy = "qcOs", fetch = FetchType.LAZY)
	public List<QcOsDetail> getQcOsDetails() {
		return qcOsDetails;
	}

	public void setQcOsDetails(List<QcOsDetail> qcOsDetails) {
		this.qcOsDetails = qcOsDetails;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PARTNER_ID")
	public Customer getCustomers() {
		return this.customers;
	}

	public void setCustomers(Customer customers) {
		this.customers = customers;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "QUOTATION_ITEM_EXE_ID")
	public QuotationItemExe getQuotationItemExe() {
		return this.quotationItemExe;
	}

	public void setQuotationItemExe(QuotationItemExe quotationItemExe) {
		this.quotationItemExe = quotationItemExe;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CREATOR", nullable = false)
	public SysUsers getSysUsers() {
		return this.sysUsers;
	}

	public void setSysUsers(SysUsers sysUsers) {
		this.sysUsers = sysUsers;
	}

	@Column(name = "AMOUNT", nullable = false, precision = 20, scale = 0)
	public long getAmount() {
		return this.amount;
	}

	public void setAmount(long amount) {
		this.amount = amount;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "CREATE_DATE", nullable = false, length = 7)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Transient
	public String getQuotationItemCode() {
		if (this.qcOsDetails.get(0).getQuotationItem() != null)
			return this.qcOsDetails.get(0).getQuotationItem().getCode();
		return null;
	}

	@Transient
	public String getWorkOrderCode() {
		if (this.qcOsDetails.get(0).getWorkOrder() != null)
			return this.qcOsDetails.get(0).getWorkOrder().getCode();
		else
			return null;
	}

	@Transient
	public String getManageCode() {
		return this.qcOsDetails.get(0).getQuotationItem().getManageCode();
	}

	@Transient
	public String getQuotationItemName() {
		if (this.qcOsDetails.get(0).getQuotationItem() != null)
			return this.qcOsDetails.get(0).getQuotationItem().getName();
		return null;
	}

	private String dsmaql;

	@Column(name = "MANAGE_CODE_LST")
	public String getDsmaql() {
		return dsmaql;
	}

	public void setDsmaql(String dsmaql) {
		this.dsmaql = dsmaql;
	}

	@JsonProperty
	private String ids;

	@Transient
	@JsonProperty
	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	@JsonProperty
	private String amounts;

	@Transient
	@JsonProperty
	public String getAmounts() {
		return amounts;
	}

	public void setAmounts(String amounts) {
		this.amounts = amounts;
	}

	public void add(QcOsDetail detail) {
		this.amount = this.amount+detail.getAmount();
		this.qcOsDetails.add(detail);
		detail.setQcOs(this);
		if (ids == null)
			ids = detail.getQcChkOutSrc().getId();
		else
			ids += "," + detail.getQcChkOutSrc().getId();
		if (amounts == null)
			this.amounts = String.valueOf(detail.getAmount());
		else
			amounts += "," + String.valueOf(detail.getAmount());
		// Cong them vao danh sach ma quan ly
		for (QcOsDetail d : this.qcOsDetails) {
			// Cung LSX
			if (d.getWorkOrder().getId().equals(detail.getWorkOrder().getId()))
				continue;
			// Cung ma ql
			if (d.getWorkOrder().getQuotationItemExe().getQuotationItemId().getId()
					.equals(detail.getWorkOrder().getQuotationItemExe().getQuotationItemId().getId()))
				continue;
			this.dsmaql += ", " + detail.getWorkOrder().getQuotationItemExe().getQuotationItemId().getManageCode();
		}

	}

	@JsonProperty("drawingCode")
	@Transient
	public String getDrawingCode() {
		return this.qcOsDetails.get(0).getQuotationItem().getCode();
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "QUOTATION_ITEM_ID")
	public QuotationItem getQuotationItem() {
		return this.quotationItem;
	}

	public void setQuotationItem(QuotationItem quotationItem) {
		this.quotationItem = quotationItem;
	}

	@JoinColumn(name = "WORK_ORDER_ID")
	@ManyToOne(fetch = FetchType.LAZY)
	public WorkOrder getWorkOrder() {
		return this.workOrder;
	}

	public void setWorkOrder(WorkOrder workOrder) {
		this.workOrder = workOrder;
	}

	/**
	 * so luong doi tac da tra hang
	 */

	private long partnerDone;

	public void setPartnerDone(long partnerDone) {
		this.partnerDone = partnerDone;
	}

	@Formula("(select nvl(sum(qii.total_amount),0) from qc_in qii where qii.QC_OS_ID = id)")
	public long getPartnerDone() {
		return partnerDone;
	}
	@Transient
	@XmlTransient
	@JsonIgnore
	public QuotationItem getQi() {
		return qcOsDetails.get(0).getQuotationItem();
	}
}
